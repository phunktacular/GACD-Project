q1.2011 <- read.csv("./kaggle_BSD/2011-1st-quarter.csv")
getwd()
setwd(..)
setwd("..")
getwd()
q1.2011 <- read.csv("./kaggle_BSD/2011-1st-quarter.csv")
kaggle.train <- read.csv("./kaggle_BSD/train.csv")
head(kaggle.train)
head(kaggle.train)[1]
head(q1.2011)
head(q1.2011)[2]
q2.2011 <- read.csv("./kaggle_BSD/2011-2nd-quarter.csv")
q3.2011 <- read.csv("./kaggle_BSD/2011-3rd-quarter.csv")
q4.2011 <- read.csv("./Kaggle_BSD/2011-4th-quarter.csv")
names(q1.2011)==names(q2.2011)
is.equal(names(q1.2011), names(q2.2011))
all.equal(names(q1.2011), names(q2.2011))
all.equal(names(q1.2011), names(q2.2011), names(q3.2011), names(q4.2011))
rm(list=ls())
ls()
library(data.table)
q1.2012 <- fread("./bu.510.650/bikeshare/2012-1st-quarter.csv")
q1.2012 <- fread("./kaggle_BSD//2012-1st-quarter.csv")
q2.2012 <- fread("./kaggle_BSD//2012-2nd-quarter.csv")
q3.2012 <- fread("./kaggle_BSD//2012-3rd-quarter.csv")
q4.2012 <- fread("./kaggle_BSD/2012-4th-quarter.csv")
names(q1.2012)
all.equal(names(q1.2012), names(q2.2012))
q1 <- read.csv("kaggle_BSD/2012-1st-quarter.csv")
q2 <- read.csv("kaggle_BSD/2012-2nd-quarter.csv")
all.equal(names(q1), names(q2))
all.equal(names(q1.2012), names(q2.2012), names(q3.2012), names(q4.2012))
source('~/code/kaggle_BSD/bikedata2011_combine.R', echo=TRUE)
head(bikedata)
install.packages("polycor")
group <- c(1:8)
group
n.lang <- c(18, 40, 74, 63, )
rm(list=ls())
language <- df(group = c(1:8),
n = c(18, 40, 74, 63, 46, 6, 2, 1),
lang.yes = c(0, 0, 46, 42, 28, 6, 2, 1),
lang.no = c(18, 40, 28, 21, 18, 0, 0, 0))
ls()
group = c(1:8)
n = c(18, 40, 74, 63, 46, 6, 2, 1)
lang.yes = c(0, 0, 46, 42, 28, 6, 2, 1)
ls()
rm(list=ls())
group = c(1:8)
n = c(18, 40, 74, 63, 46, 6, 2, 1)
lang.yes = c(0, 0, 46, 42, 28, 6, 2, 1)
lang.no = c(18, 40, 28, 21, 18, 0, 0, 0)
language <- cbind(group, n)
language <- cbind(group, n, lang.yes, lang.no)
language
cult.yes = c(0, 0, 7, 28, 18, 6, 2, 1)
cult.no = n - cult.yes
culture <- cbind(group, n, cult.yes, cult.no)
culture
effect <- cbind(group, n, lang.yes, lang.no, cult.yes, cult.no)
effect
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
effect <- cbind(group, scoure, n, lang.yes, lang.no, cult.yes, cult.no)
effect <- cbind(group, score, n, lang.yes, lang.no, cult.yes, cult.no)
effect
class(effect)
effect <- cbind(group, n, lang.yes, lang.no, cult.yes, cult.no)
class(effect)
effect
effect <- df(group, n, lang.yes, lang.no, cult.yes, cult.no)
?df
effect <- data.frame(group, n, lang.yes, lang.no, cult.yes, cult.no)
effect
effect <- data.frame(group, score, n, lang.yes, lang.no, cult.yes, cult.no)
effect
ef.binom <- cbind(group, n, lang.yes, cult.yes)
ef.binom
ef.binom <- data.frame(group, n, lang.yes, cult.yes)
source('~/code/JKF/initial.R', echo=TRUE)
ef.binom
effect
plot(ef.binom)
plot(ef.binom, tpe="b")
plot(ef.binom, tpe="l")
plot(lang.yes~group)
plot(lang.yes~group, type="h")
hist(lang.yes~group)
library(ggplot)
library(ggplot2)
g1 <- ggplot(aes(x = group, y = lang.yes), data = effect)
?ggplot2
?ggplot
g1 + geom_hist(stat = identity)
g1 + geom_histogram(stat = identity)
g1 + geom_histogram()
g1 + geom_histogram(stat = "idenity")
g1 + geom_histogram(stat = "identity")
g1 + geom_histogram(stat = "identity", aes(col = y))
g1 + geom_histogram(stat = "identity")
g1 <- ggplot(aes(x = group, y = cult.yes, data = effect)
g1 + geom_histogram(stat = "identity")
g1 <- ggplot(aes(x = group, y = cult.yes, data = effect)
g1 <- ggplot(aes(x = group, y = cult.yes, data = effect))
g1 <- ggplot(aes(x = group, y = cult.yes, data = effect))
g1 <- ggplot(aes(x = group, y = cult.yes), data = effect)
g1 + geom_histogram(stat = "identity")
g1 + geom_histogram(stat = "identity", col = "blue")
g1 + geom_histogram(stat = "identity", fill = "blue")
geom_histogram(stat = identity, aes(y = lang.yes))
g1 + geom_histogram(stat = "identity", fill = "blue") +
geom_histogram(stat = "identity", aes(y = lang.yes), fill = "red")
g1 <- ggplot(aes(x = group), data = effect)
g1 + geom_histogram(stat = "identity", aes(y = lang.yes), fill = "red")
g1 + geom_histogram(stat = "identity", aes(y = lang.yes), fill = "red") +
geom_line(aes(y = cult.yes), col = "blue")
g1 + geom_histogram(stat = "identity", aes(y = lang.yes), fill = "red") +
geom_hostogram(stat = "identity", aes(y = cult.yes), col = "blue")
g1 + geom_histogram(stat = "identity", aes(y = lang.yes), fill = "red") +
geom_histogram(stat = "identity", aes(y = cult.yes), col = "blue")
g1 + geom_line(aes(y = lang.yes), col = "red") +
geom_line(aes(y = cult.yes), col = "blue")
g2 <- ggplot(aes(x = group), data = effect)
g2 + geom_line(aes(y = lang.yes/n), col = "red")
geom_line(aes(y = cult.yes/n), col = "blue")
g2 + geom_line(aes(y = lang.yes/n), col = "red") +
geom_line(aes(y = cult.yes/n), col = "blue")
g2 <- ggplot(aes(x = score), data = effect)
g2 + geom_line(aes(y = lang.yes/n), col = "red") +
geom_line(aes(y = cult.yes/n), col = "blue")
g2 + geom_line(aes(y = lang.yes/n, group=1), col = "red") +
geom_line(aes(y = cult.yes/n, group=1), col = "blue")
punif(1,1)
runif(1000, 1, 18)
x <- runif(1000, 1, 18)
take(x)
table(x)
x <- qunif(1000, 1, 18)
x <- runif(1000, 1, 18)
x <- sample(1:18, 10000, replace = TRUE)
table(x)
?prod
?sample
x <- 6
1:x
rm(list=ls())
nd6 <- function(n = 3, d = 6){
return(sum(sample(1:d, n = n, replace = TRUE)))
}
nd6(3, 6)
nd6 <- function(dice = 3, sides = 6){
return(sum(sample(1:sides, n = dice, replace = TRUE)))
}
nd6(2,3)
nd6 <- function(dice = 3, sides = 6){
x <- 1:sides
return(sum(sample(x, n = dice, replace = TRUE)))
}
nd6(2,3)
dice = 3
x
sides <- 2
sides
dice
sample(1:sides, n = dice)
dice
sample(2,3,replace=TRUE)
dicd
dice
class(dice)
class(2)
sample(2, dice, replace=TRUE)
sample(1:^, dice, replace=TRUE)
sample(1:6, dice, replace=TRUE)
x
x <- 1:sides
x
class(1:6)
class(x)
sample(1:sides, dice)
sample(1:sides, dice, replace=TRUE)
y <- sample(1:sides, dice, replace=TRUE)
y
sum(y)
nd6 <- function(dice = 3, sides = 6){
return(sum(sample(1:sides, dice, replace = TRUE)))
}
nd6(2,3)
?rep
?repeat
?
help(repeat)
?replicate
x <- replicate(50, nd6(2,3))
x
table(x)
x <- replicate(10000, nd6(3,6))
plot(x)
table(x)
hist(x)
set.seed(1)
?replicate
source('~/code/RPG/kitt_dice.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(dist.3d6)
hist(dist.3d6)
dist.3d6 <- replicate(100000, ndk(3, 6))
hist(dist.3d6)
library(ggplot2)
g <- ggplot(data = dist.3d6)
?ggplot
g <- ggplot(dist.3d6)
df.3d6 <- as.data.frame(dist.3d6)
g <- ggplot(df.3d6)
head(df.3d6)
head(df.3d6, 10)
g + geom_histogram()
g + geom_histogram(aes(x=dist.3d6))
g + geom_histogram(aes(x=dist.3d6, binwidth = x))
g + geom_histogram(aes(x=dist.3d6), binwidth = dist.3d6)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.5)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.75)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=1)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25) +
geom_density(aplha=.5)
geom_density(aes(x=dist.3d6)aplha=.5)
geom_density(aes(x=dist.3d6),aplha=.5)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25) +
geom_density(aes(x=dist.3d6),aplha=.5)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25) +
geom_density(aes(x=dist.3d6, y=..density..))
mean(df.3d6[2])
mean(df.3d6[,2])
mean(df.3d6[1])
mean(df.3d6[,1])
mean(df.3d6)
names(df.3d6)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25) +
stat_function(fun="dnorm", args=list(mean=mean(df.3d6$dist.3d6),
sd=sd(df.3d6$dist.3d6)))
g + geom_histogram(aes(x=dist.3d6), binwidth=.25) +
stat_function(fun="dnorm", args=list(mean=mean(df.3d6$dist.3d6),
sd=sd(df.3d6$dist.3d6)))
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25) +
stat_function(fun="dnorm", args=list(mean=mean(df.3d6$dist.3d6),
sd=sd(df.3d6$dist.3d6)))
?geom_histogram
?linetype
?stat_density
g + geom_histogram(aes(x=dist.3d6), binwidth=.25)
g + geom_histogram(aes(x=dist.3d6), binwidth=1)
g + geom_histogram(aes(x=dist.3d6), binwidth=1, y=..density..)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=1)
g <- ggplot(df.3d6, aes(x=dist.3d6))
g + geom_histogram(aes(y=..density..), binwidth=1)
geom_density()
g + geom_histogram(aes(y=..density..), binwidth=1) +
geom_density()
?dnorm
g + geom_histogram(aes(y=..density..), binwidth=1) +
stat_function(fun=dnorm, args=list(mean=mean(df.3d6$dist.3d6),
sd=sd(df.3d6$dist.3d6)))
g + geom_histogram(aes(y=..density..), binwidth=.5) +
stat_function(fun=dnorm, args=list(mean=mean(df.3d6$dist.3d6),
sd=sd(df.3d6$dist.3d6)))
g + geom_histogram(aes(y=..density..), binwidth=1) +
stat_function(fun=dnorm, args=list(mean=mean(df.3d6$dist.3d6),
sd=sd(df.3d6$dist.3d6)))
dice.pr(1, 1, 20, 20)
mean(df.3d6$dist.3d6)
dice.pr
dice.pr(1, 3, 10, 20)
dice.pr(1, 1, 10, 20)
dice.pr(1, 1, 15, 20)
dice.pr(1, 3, 15, 20)
dice.pr(1, 4, 15, 20)
dice.pr(1, 5, 15, 20)
dice.pr(1, 1, 5, 20)
dice.pr(1, 1, 10, 20)
dice.pr(1, 1, 20, 20)
dice.pr(1, 1, 15, 20)
dice.pr(2, 3, 10, 20)
ndk(1,20)
ndk(1,20)
ndk(1,20)
ndk(1,20)
sample(1:52, 3)
sample(1:52, 3, replace=FALSE)
sample(1:52, 5, replace=FALSE)
source('~/code/RPG/kitt_dice.R', echo=TRUE)
dice.pr(3, 4, 10, 20)
dice.pr(1, 4, 10, 20)
dice.pr(1, 4, 15, 20)
dice.pr(1, 4, 15, 20)
dice.pr(1, 1, 15, 20)
dice.pr(1, 1, 10, 20)
dice.pr(1, 1, 15, 20)
dice.pr(1, 4, 10, 20)
?geom_histogram
2/54
1/20
library(xlsx)
url2 <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url2, "ngap.xlsx")
source('~/code/coursera/gacd/quiz1.R', echo=TRUE)
?read.xlsx
?colIndex
dat <- read.xlsx("ngap.xlsx", startRow=18, endRow=23, colIndex=c(7:15))
dat <- read.xlsx("ngap.xlsx", sheetIndex=1,
startRow=18, endRow=23, colIndex=c(7:15))
ls()
dat <- read.xlsx("ngap.xlsx")
download.file(url2, "ngap.xlsx", method="curl")
get_wd()
wetwd()
getwd()
download.file(url2, "ngap.xlsx", method="curl", mode="wb")
download.file(url2, "ngap.xlsx", mode="wb")
dat <- read.xlsx("ngap.xlsx")
dat <- read.xlsx("ngap.xlsx", sheetIndex=1)
dat <- read.xlsx("ngap.xlsx", sheetIndex=1, startRow=18, endRow=23,
colIndex=c(7:15))
sum(dat$Zip*dat$Ext,na.rm=T)
url3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(url3, "rest.xml", mode="wb")
library(XML)
install.packages("XML")
tree <- xmlTreeParse(url3, useInternal=T)
library(XML)
tree <- xmlTreeParse(url3, useInternal=T)
tree <- xmlTreeParse(url3, useInternal=T, isURL=T)
tree <- xmlTreeParse("rest.xml", useInternal=T)
head(tree)
xmlRoot(tree)
xmlName(tree)
rnode <- xmlRoot(tree)
xmlName(root)
xmlName(rnode)
names(rnode)
rnode
xmlSApply(rnode, table(zipcode))
names(rnode)
names(rnode[row])
names(rnode["row"])
names(rnode)[1]
names(rnode)[1][1]
rnode[1][1]
xmlValue(rnode)
xmlChildren(rnode)
names(rnode[[1]])
names(rnode[[1]][["zipcode"]])
tgt <- rnode[[1]][["zipcode"]]
names(rnode[[1]])
names(rnode[[1]][["row"]])
tgt <- rnode[[1]][["row"]]
names(tgt[["zipcode"]])
xmlValue(tgt[["zipcode"]])
table(xmlSApply(tgt, function(x) xmlSApply(x, xmlValue)))
xmlSApply(tgt, function(x) xmlSApply(x, xmlValue))
xmlSApply(tgt[["zipcode"]], function(x) xmlSApply(x, xmlValue))
xmlSApply(tgt[["zipcode"]][["text"]], function(x) xmlSApply(x, xmlValue))
xmlSApply(tgt[["zipcode"]][["text"]], xmlValue())
xmlSApply(tgt[["zipcode"]][["text"]], function(x) xmlValue(x))
tgt
names(rnode)
names(rnode[[1]])
names(rnode[[1]][["row"]])
names(rnode[[1]]["row"])
names(rnode[[1]][["row"]])
xmlValue(tgt[[1]])
xmlValue(tgt[["zipcode"]])
tgt <- rnode[[1]][[1]]
tgt
tgt <- rnode[[1]][["row"]]
tgt
tgt <- rnode[[1]]
tgt
tgt <- rnode[[1]]
xmlValue(tgt[["zipcode"]])
names(tgt)
xmlValue(tgt[["row"]])
names(tgt[["row"]])
xmlSApply(tgt, xmlValue)
tgt <- rnode[[1]][["row"]]
xmlSApply(tgt, xmlValue)
tgt <- rnode[[1]][["zipcode"]]
xmlSApply(tgt, xmlValue)
names(tgt)
names(rnode)
names(rnode[["row"]])
names(rnode[["row"]]["row"])
names(rnode[["row"]][["row"]])
tgt <- rnode[["row"]]
xmlSApply(tgt, xmlValue)
xmlSApply(tgt, names)
xmlSApply(tgt, xmlValue)
xmlSApply(tgt, names)
tgt <- rnode[["row"]][[zipcode]]
xmlSApply(tgt, names)
tgt <- rnode[["row"]][[2]]
xmlSApply(tgt, names)
xmlSApply(tgt["zipcode"], names)
XMLNodeList(rnode)
xpathSApply(rnode)
nodes <- getNodeSet(rnode, "//row/row[@zipcode='21231'")
nodes <- getNodeSet(rnode, "//row/row[@zipcode='21231']")
nodes
lapply(nodes, function(x) xmlSApply(x, count))
lapply(nodes, function(x) xmlSApply(x))
lapply(nodes, xmlValue)
tgt <- rnode[["row"]][["row"]][["zipcode"]]
tgt
tgt <- rnode[["row"]][["row"]]
xmlSApply(tgt[["zipcode"]], xmlValue)
zips <- xmlSApply(tgt[["zipcode"]], xmlValue)
zips
zips <- xmlSApply(tgt, xmlValue)
zips
tgt <- rnode[["row"]]
zips <- xmlSApply(tgt, xmlValue)
zips
zips <- xmlSApply(tgt[[1]], xmlValue)
zips
zips <- xmlSApply(tgt[[1]][[2]], xmlValue)
zips
zips <- xmlApply(tgt[[1]][[2]], xmlValue)
zips
zips <- xmlApply(tgt[[2]][[2]], xmlValue)
zips
length(tgt)
nrow(target)
nrow(tgt)
count(tgt)
tgt
tgt[[]]
names(tgt)
length(names(tgt))
as.numeric(tgt[[1]][[2]])
as.numeric(tgt[[1]][[2]][[2]])
as.numeric(tgt[[1]][[2]])
tgt[[1]][[2]]
tgt[[1]][["zipcode"]]
xmlValue(tgt[[1]][[2]])
x <- data.frame()
for (i in 1:length(names(tgt))){
x[i] <- as.numeric(xmlValue(tgt[[i]][[2]]))
}
x <- data.frame()
for (i in 1:length(names(tgt))){
x <- rbind(x, as.numeric(xmlValue(tgt[[i]][[2]])))
}
table(x)
table(x)
url4 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url4, mode="wt")
download.file(url4, destfile="survey.csv", mode="wt")
library(data.table)
DT <- fread("survey.csv")
times <- vector()
times[1] <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
x <- vector()
x[1] <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
install.packages("devtools")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
library(RMySQL)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
read.table
?read.table
?read.fwf
my.dir <- "./coursera/gacd/gacd-project"
setwd(my.dir)
train.x <- read.fwf("data/train/x_train.txt", widths=16, n=10)
head(train.x)
train.x <- read.fwf("data/train/x_train.txt", widths=widths, n=10)
widths <- rep(c(-1, 15), 561) # column widths for the fixed width files
train.x <- read.fwf("data/train/x_train.txt", widths=widths, n=10)
head(train.x)
train.x <- read.fwf("data/train/x_train.txt", widths=c(16,16), n=10)
head(train.x)
widths <- rep(16, 561) # column widths for the fixed width files
train.x <- read.fwf("data/train/x_train.txt", widths=widths, n=10)
head(train.x)
train.x <- read.fwf("data/train/x_train.txt", widths=widths)
